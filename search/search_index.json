{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#introduction","title":"Introduction","text":""},{"location":"#welcome-to-pentane-documentation","title":"Welcome to Pentane Documentation!","text":"<p>This site serves as a one-stop-shop for all things Pentane; from installation tutorials to API references and more! Here, you'll find information regarding all valid Pentane game targets, including documentation of specific games' classes/functions as well as general modding guides.</p> <p>As this site is currently under construction, most pages are empty, and significant amount of information is missing. If you're looking to help add new pages or revise existing ones, feel free to contribute via PR!</p>"},{"location":"#what-is-pentane","title":"What is Pentane?","text":"<p>Pentane is a user-configurable plugin loader and modding framework for the following games:</p> <ul> <li>Rhythm Racing Engine<ul> <li>Cars: The Video Game (PC) \ud83d\udfe8 Experimental!</li> <li>Cars: Mater-National Championship (PC) \ud83d\udfe8 Experimental!</li> </ul> </li> <li>Octane Engine<ul> <li>Cars 2: The Video Game (PC) \u2705 Production-Ready!</li> <li>Cars 2: Arcade (PC) \u2705 Production-Ready!</li> <li>Cars 3: Driven to Win (Xbox One) \u274c Non-Functional!</li> </ul> </li> </ul> <p>Pentane's plugin system allows plugin developers to modify game code, and implement new functionalities/bug fixes directly into games. These plugins are developed from collective reverse-engineering efforts, and utilize strategies such as function hooking to intercept/replace individual functions or parts of functions with custom implementations.</p>"},{"location":"installation-and-setup/","title":"Installation and Setup","text":""},{"location":"installation-and-setup/#installation-and-setup","title":"Installation and Setup","text":"<p>Si necesita un tutorial en espa\u00f1ol, haga clic aqu\u00ed.</p> <p>Je\u015bli potrzebujesz poradnika w j\u0119zyku polskim, kliknij here.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0440\u0443\u0441\u0441\u043a\u043e\u044f\u0437\u044b\u0447\u043d\u044b\u0439 \u0442\u0443\u0442\u043e\u0440\u0438\u0430\u043b, \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"installation-and-setup/#unpacking-your-executable","title":"Unpacking your Executable","text":"<p>If you're installing Pentane for the Steam version of a supported game, you will need to unpack your game's executable file before Pentane installation.</p> <p>Note: If you're installing Pentane for the CD release of Cars: Mater-National Championship, the Amazon Games version of Cars: The Video Game, or Cars 2: Arcade, you should skip this section.</p> <ol> <li>Head to the releases page on the Steamless GitHub repository, linked here.</li> <li>Download the <code>.zip</code> file linked under the Assets tab, and extract it.</li> <li>Once you have extracted the <code>.zip</code> file, open <code>Steamless.exe</code>.</li> <li>Directly under the first numbered label, titled \"Select File to Unpack\", click on the button with the elipsis.</li> <li>Navigate to the folder where your game is installed. This is usually inside the <code>C:\\Program Files (x86)\\Steam\\steamapps\\common</code> folder by default.</li> <li>Select your game's executable file, and click Open.<ul> <li>For Cars: The Video Game, this is <code>Cars.exe</code>.</li> <li>For Cars: Mater-National Championship, this is <code>Cars_Mater.exe</code>.</li> <li>For Cars 2: The Video Game, this is <code>Game-Cars.exe</code>.</li> </ul> </li> <li>Click the \"Unpack File\" button. Once you see the \"Successfully unpacked file!\" message appear, continue to the next step.</li> <li>Exit Steamless, and navigate back to the folder where your target game is installed. You should now see a new executable file, named exactly the same as the old one, except with <code>.unpacked.exe</code> appended to the end of the filename.</li> <li>Delete the old executable, and name your newly-unpacked executable the same name as the old one.</li> <li>You're done! You may continue onward to Pentane installation.</li> </ol>"},{"location":"installation-and-setup/#installing-pentane-non-game-specific","title":"Installing Pentane (Non-Game-Specific)","text":"<ol> <li>Head to the releases page on the Pentane Installer GitHub repository, linked here.</li> <li>Download the <code>PentaneInstaller.exe</code> file and open it. Navigate to the folder where your target game is installed, and select its executable file.<ul> <li>For Cars: The Video Game (Amazon/Steam Unpacked), this is <code>Cars.exe</code>.</li> <li>For Cars: Mater-National Championship (CD/Steam Unpacked), this is <code>Cars_Mater.exe</code>.</li> <li>For Cars 2: The Video Game (Steam Unpacked), this is <code>Game-Cars.exe</code>.</li> <li>For Cars 2: Arcade (Version 1.42), this is <code>sdaemon.exe</code>.</li> </ul> </li> <li>Head to the releases page on the Pentane GitHub repository, linked here.</li> <li>Download the correct <code>.dll</code> file for your target game, linked under the Assets tab. Note that it is very important you select the correct <code>.dll</code>, as they are not cross-compatible.<ul> <li>For Cars: The Video Game (Amazon/Steam Unpacked), this is <code>Pentane-TVG.dll</code>.</li> <li>For Cars: Mater-National Championship (CD/Steam Unpacked), this is <code>Pentane-MN.dll</code>.</li> <li>For Cars 2: The Video Game (Steam Unpacked), this is <code>Pentane-2TVG.dll</code>.</li> <li>For Cars 2: Arcade (Version 1.42), this is <code>Pentane-2TVGA.dll</code>.</li> </ul> </li> <li>Rename your newly-downloaded <code>dll</code> file to <code>Pentane.dll</code>, and place it in root folder of your target game's installation, next to its executable file.</li> <li>In the root folder of your target game, create a <code>Pentane</code> folder next to <code>Pentane.dll</code> and your game's executable file.</li> <li>Create a <code>Plugins</code> folder inside the <code>Pentane</code> folder. This is where all your Pentane plugins for the target game will reside.</li> <li>You're done! Please continue onward to configuring Pentane.</li> </ol>"},{"location":"installation-and-setup/#configuring-pentane","title":"Configuring Pentane","text":"<ol> <li>Navigate to the <code>assets/config-templates</code> folder in the Pentane GitHub repository, linked here.</li> <li>Click on the <code>.toml</code> file that corresponds with your target game.<ul> <li>For Cars: The Video Game, this is <code>cars-the-video-game.toml</code>.</li> <li>For Cars: Mater-National Championship, this is <code>cars-mater-national.toml</code>.</li> <li>For Cars 2: The Video Game, this is <code>cars-2.toml</code>.</li> <li>For Cars 2: Arcade, this is <code>cars-2-arcade.toml</code>.</li> </ul> </li> <li>Click on the \"Copy raw file\" button located next to the button labelled Raw, or alternatively, select the contents of the file and copy it to your clipboard.</li> <li>Open a text editor, such as Notepad or Notepad++, and paste your clipboard contents into a new document. The contents of this file should be identical to what is on the repository.</li> <li>Save this file as <code>config.toml</code> inside the <code>Pentane</code> folder for your target game. If done correctly, <code>Pentane/config.toml</code> should exist relative to your game's executable and <code>Pentane.dll</code> file.</li> <li>Re-open the <code>config.toml</code> file in a text editor and edit the configuration options to your liking. Make sure you do not remove any existing options.</li> <li>Check to make sure your <code>config.toml</code> file is still valid TOML, by using a linter such as toml-lint.com.</li> <li>You're done!</li> </ol> <p>NOTE: If you're installing Pentane for Cars 2: Arcade, it is highly recommended you also install ArcadeEssentials. If you'd like to install ArcadeEssentials, continue onward to its installation tutorial here.</p>"},{"location":"games/cars-2/file-formats/","title":"File Formats","text":""},{"location":"games/cars-2/file-formats/#file-formats","title":"File Formats","text":""},{"location":"games/cars-2/file-formats/#oct","title":"oct","text":"<p>Tupperware files. Use <code>matryoshka</code> to decode them into standard JSON or YAML.</p>"},{"location":"games/cars-2/file-formats/#mer","title":"mer","text":"<p>Meridian tree structures, stored as Tupperware. Use matryoshka to decode them into standard JSON or YAML.</p>"},{"location":"games/cars-2/file-formats/#vbuf","title":"vbuf","text":"<p>Stands for Vertex Buffer. Used to store raw vertex data in a format convinent for the rendering engine. Metadata from an <code>oct</code> file is required to properly parse these files.</p>"},{"location":"games/cars-2/file-formats/#ibuf","title":"ibuf","text":"<p>Stands for Index Buffer. Used to store raw index data in a format convinent for the rendering engine. Metadata from an <code>oct</code> file is required to properly parse these files.</p>"},{"location":"games/cars-2/file-formats/#dct","title":"dct","text":"<p>Localization dictionaries. Use <code>indctive</code> to decode them into standard JSONs.</p>"},{"location":"games/cars-2/file-formats/#zip","title":"zip","text":"<p>ZIP Archives, with extra metadata embedded inside used by the engine's filesystem. Use the <code>why</code> tool included in the Python package <code>c2ditools</code> to re-pack archives in a game-friendly format.</p>"},{"location":"games/cars-2/file-formats/#dds","title":"dds","text":"<p>Microsoft DirectDraw Surface textures. Can be viewed and edited with most image manipulation tools such as GIMP, Paint.NET, and Adobe Photoshop.</p>"},{"location":"games/cars-2/file-formats/#tfx","title":"tfx","text":"<p>Groups of compiled HLSL (High-Level Shader Language) shaders, stored inside Tupperware files. Use <code>matryoshka</code> to decode them into standard JSON or YAML.</p>"},{"location":"games/cars-2/file-formats/#swf","title":"swf","text":"<p>Standard Shockwave Flash files. Used by the game's Autodesk Scaleform-backed UI system.</p>"},{"location":"games/cars-2/guides/arcade-essentials/","title":"Installing ArcadeEssentials","text":""},{"location":"games/cars-2/guides/arcade-essentials/#installing-arcadeessentials","title":"Installing ArcadeEssentials","text":"<p>Si necesita un tutorial en espa\u00f1ol, haga clic aqu\u00ed.</p> <p>Je\u015bli potrzebujesz poradnika w j\u0119zyku polskim, kliknij here.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0440\u0443\u0441\u0441\u043a\u043e\u044f\u0437\u044b\u0447\u043d\u044b\u0439 \u0442\u0443\u0442\u043e\u0440\u0438\u0430\u043b, \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u0437\u0434\u0435\u0441\u044c.</p> <p>WARNING: ArcadeEssentials is NOT COMPATIBLE with PC version of Cars 2: The Video Game! It is only compatible with Cars 2: Arcade.</p> <ol> <li>If you haven't already installed Pentane for Cars 2: Arcade, refer to the Pentane installation tutorial and complete its setup process before proceeding.</li> <li>Head to the releases page on the ArcadeEssentials GitHub repository, linked here.</li> <li>Download the <code>release.zip</code> file linked under the Assets tab.</li> <li>You will find two folders in the zip file, one named <code>Pentane</code> and one labeled <code>assets</code>.<ul> <li>If you're planning on installing an overhaul mod such as Cars 2: Restorations or Cars 2: Deluxe, just copy the <code>Pentane</code> folder into the root of your game's installation, right next to <code>sdaemon.exe</code> and <code>Pentane.dll</code>.</li> <li>Otherwise, copy both the <code>assets</code> folder and the <code>Pentane</code> folder into the root of your game's installation, right next to <code>sdaemon.exe</code> and <code>Pentane.dll</code>. Make sure to replace any files already present in the destination.</li> </ul> </li> <li>Open <code>Pentane/config.toml</code> in a text editor, like Notepad or Notepad++.</li> <li>Under the <code>[plugins]</code> section, edit the <code>enabled_plugins</code> list to include <code>\"ArcadeEssentials.dll\"</code>, and save your changes.<ul> <li>Example: <pre><code>[plugins]\nenabled_plugins = [\"ArcadeEssentials.dll\"]\n</code></pre></li> </ul> </li> <li>Check to make sure your <code>config.toml</code> file is still valid TOML, by using a linter such as toml-lint.com.</li> <li>You're done!</li> </ol>"},{"location":"games/mater-national/file-formats/","title":"File Formats","text":""},{"location":"games/mater-national/file-formats/#file-formats","title":"File Formats","text":""},{"location":"games/mater-national/file-formats/#as","title":"as","text":"<p>Stands for ActionScript, a proprietary ParameterBlock-based scripting language used for story events. (Not to be confused with Adobe Flash's scripting language!)</p>"},{"location":"games/mater-national/file-formats/#aty","title":"aty","text":"<p>ParameterBlock files that describe activity information.</p>"},{"location":"games/mater-national/file-formats/#aud","title":"aud","text":"<p>ParameterBlock files that describe the contents of sound banks.</p>"},{"location":"games/mater-national/file-formats/#bik","title":"bik","text":"<p>Videos encoded in the Bink Video format, part of the RAD Game Tools middleware.</p>"},{"location":"games/mater-national/file-formats/#bxml","title":"bxml","text":"<p>Stands for Binary XML. Used in Mater-National to describe keyframe animations for UI elements.</p>"},{"location":"games/mater-national/file-formats/#cel","title":"cel","text":"<p>A proprietary format that stores font cell information.</p>"},{"location":"games/mater-national/file-formats/#cmt","title":"cmt","text":"<p>Stands for Collision Material Table. These are ParameterBlock files that map ground collision materials to sounds.</p>"},{"location":"games/mater-national/file-formats/#cwd","title":"cwd","text":"<p>Stands for Crowd.</p>"},{"location":"games/mater-national/file-formats/#dds","title":"dds","text":"<p>Microsoft DirectDraw Surface textures. Can be viewed and edited with most image manipulation tools such as GIMP, Paint.NET, and Adobe Photoshop.</p>"},{"location":"games/mater-national/file-formats/#hlsl","title":"hlsl","text":"<p>High-Level-Shader-Language (HLSL) Source Code.</p>"},{"location":"games/mater-national/file-formats/#prt","title":"prt","text":"<p>ParameterBlock files that store particle effect information.</p>"},{"location":"games/mater-national/file-formats/#psh","title":"psh","text":"<p>Compiled HLSL Pixel Shader.</p>"},{"location":"games/mater-national/file-formats/#res","title":"res","text":"<p>Stands for Resource File. Used to package files often loaded and unloaded at the same time together.</p>"},{"location":"games/mater-national/file-formats/#scn","title":"scn","text":"<p>ParameterBlock files that describe the contents of a scene. (placement of static models, collision objects, lighting information, etc.)</p>"},{"location":"games/mater-national/file-formats/#soi","title":"soi","text":"<p>Stands for Streaming Object Information. Stores general information about a streaming container, as well as every header for every element/file in the container.</p>"},{"location":"games/mater-national/file-formats/#spl","title":"spl","text":"<p>ParameterBlock files that store spline curves. Usage unknown (likely AI?)</p>"},{"location":"games/mater-national/file-formats/#slt","title":"slt","text":"<p>ParameterBlock files that describe renderable models in plaintext, similar to OBJ. This format is not usable in any of the Rainbow Studios games by default, so any files must be converted to GCG/PSG/DXG/P3G/XNG</p>"},{"location":"games/mater-national/file-formats/#str","title":"str","text":"<p>Streaming data heap, must be paired with a SOI and TOC to form a streaming container.</p>"},{"location":"games/mater-national/file-formats/#sty","title":"sty","text":"<p>ParameterBlock files that describe a UI style sheet.</p>"},{"location":"games/mater-national/file-formats/#tga","title":"tga","text":"<p>Truevision TARGA textures. Can be viewed and edited with most image manipulation tools such as GIMP, Paint.NET, and Adobe Photoshop.</p>"},{"location":"games/mater-national/file-formats/#toc","title":"toc","text":"<p>Stands for Table Of Contents. Maps streaming component IDs with instance IDs, and stores information about the layout and contents of the adjacent STR file.</p>"},{"location":"games/mater-national/file-formats/#toy","title":"toy","text":"<p>ParameterBlock files that describe the placement of Toy objects within scenes or collections.</p>"},{"location":"games/mater-national/file-formats/#trk","title":"trk","text":"<p>ParameterBlock files that store track information.</p>"},{"location":"games/mater-national/file-formats/#vsh","title":"vsh","text":"<p>Compiled HLSL Vertex Shader.</p>"},{"location":"games/mater-national/file-formats/#xng","title":"xng","text":"<p>Stands for Xenon (Xbox 360) Geometry. This format describes renderable models, similar to OBJ and FBX. Used in the Xbox 360, Playstation 3, and PC versions of Mater-National.</p>"},{"location":"games/mater-national/file-formats/#xnm","title":"xnm","text":"<p>Stands for Xenon (Xbox 360) Material. These ParameterBlock-based files describe individual materials by what shader they use, which textures should be bound and to which registers, and much more.</p>"},{"location":"games/mater-national/guides/animations/","title":"Animations","text":""},{"location":"games/mater-national/guides/audio/","title":"Audio","text":""},{"location":"games/mater-national/guides/models/","title":"Models","text":""},{"location":"games/mater-national/guides/shaders/","title":"Shaders","text":""},{"location":"games/mater-national/guides/textures/","title":"Textures","text":""},{"location":"plugin-development/api-reference/","title":"API Reference","text":""},{"location":"plugin-development/api-reference/#api-reference","title":"API Reference","text":"<p>WARNING! PENTANE'S API IS NOT STABLE SO ALL OF THIS IS SUBJECT TO CHANGE!</p> <p>If you're here for documentation on the Rust API, head over to docs.rs.</p>"},{"location":"plugin-development/api-reference/#structures","title":"Structures","text":"<p><code>SemVer</code> - A structure representing a Semantic Version.</p> Type Member Description <code>std::uint16_t</code> <code>major</code> The major version. <code>std::uint16_t</code> <code>minor</code> The minor version. <code>std::uint16_t</code> <code>patch</code> The patch version. <p><code>PluginInformation</code> - Important plugin metadata, used by Pentane's plugin loader. Should always be exactly 1024 bytes in size.</p> Type Member Description <code>char[256]</code> <code>name</code> A buffer containing a string representing the name of the plugin. <code>char[256]</code> <code>author</code> A buffer containing a string representing the author(s) of the plugin. <code>PentaneUUID</code> <code>uuid</code> The plugin's version 4 UUID. <code>SemVer</code> <code>version</code> The current version of the plugin. <code>SemVer</code> <code>minimum_pentane_version</code> The minimum version of Pentane that is required by the plugin. <code>char[???]</code> <code>reserved</code> Extra space for Pentane to potentially request more metadata from plugins in the future. Please leave this zero-initialized! <p><code>PentaneCStringView</code> - A structure representing a non-owning view of a string.</p> Type Member Description <code>const char* const</code> <code>data</code> A const pointer to the string data. Must be UTF-8. <code>const std::size_t</code> <code>data_len</code> The length of the string data in bytes. <p><code>PentaneUUID</code> - A structure representing a version 4 UUID.</p> Type Member Description <code>std::uint8_t[16]</code> <code>data</code> A version 4 UUID, stored directly as bytes."},{"location":"plugin-development/api-reference/#functions","title":"Functions","text":"<p>WARNING: All functions are synchronous, and as such, should not be called excessively during the target application's runtime (i.e. outside of a plugin's <code>Pentane_Main</code>) to avoid any deadlocks.</p> <p>The following functions are exported by all <code>Pentane.dll</code> binaries, irrespective of the target game:</p> Function Name Return Type Description <code>Pentane_LogUTF8(PentaneCStringView* c_str);</code> <code>void</code> Outputs an input string to the logger. <code>Pentane_IsPluginLoaded(PentaneUUID* uuid);</code> <code>std::int32_t</code> Determines if a currently loaded plugin matches the input UUID. Returns 0 if no loaded plugins match the given UUID, 1 if a plugin with the given UUID is loaded. <code>Pentane_GetUserLanguage_ISO6391();</code> <code>std::uint16_t</code> Retrieves the user-selected language in the form of an ISO 639-1 code. The first character is stored in the upper 8 bits of the return value, while the second character is stored in the lower 8 bits. <p>These functions are specific to Cars: Mater-National Championship:</p> Function Name Return Type Description <code>Pentane_IsSaveRedirectionEnabled();</code> <code>std::int32_t</code> Returns 0 if save file redirection is disabled, 1 if it is enabled. <p>These functions are specific to Cars 2: The Video Game:</p> Function Name Return Type Description <code>Pentane_IsWindowedModeEnabled();</code> <code>std::int32_t</code> Returns 0 if windowed mode is disabled, 1 if it is enabled. <p>These functions are specific to Cars 2: Arcade:</p> Function Name Return Type Description <code>Pentane_IsWindowedModeEnabled();</code> <code>std::int32_t</code> Returns 0 if windowed mode is disabled, 1 if it is enabled."},{"location":"plugin-development/api-reference/#example-code","title":"Example Code","text":"<p>An example for how to use <code>Pentane_IsPluginLoaded</code>, <code>Pentane_LogUTF8</code>, and <code>Pentane_GetUserLanguage_ISO6391</code>.</p> <pre><code>constexpr std::uint16_t JAPANESE = static_cast&lt;std::uint16_t&gt;('j') &lt;&lt; 8 | 'a';\nconst PentaneUUID TEST_MOD = {};\n// ...\nif (Pentane_IsPluginLoaded(&amp;TEST_MOD) != 0) {\n    std::string str = \"Hello!\";\n    std::uint16_t code = Pentane_GetUserLanguage_ISO6391();\n    if (code == JAPANESE) {\n        str = \"\u3053\u3093\u306b\u3061\u306f\uff01\";\n    }\n    PentaneCStringView c_str{ str.c_str(), str.size() };\n    Pentane_LogUTF8(&amp;c_str);\n}\n</code></pre> <p>An example definition of a plugin's metadata.</p> <pre><code>extern \"C\" PluginInformation Pentane_PluginInformation = PluginInformation {\n    .name = \"Example Plugin\",\n    .author = \"John Doe\",\n    .uuid = {},\n    .version = { 0, 1, 0 },\n    .minimum_pentane_version = { 0, 2, 0 },\n    .reserved = {},\n};\n</code></pre>"},{"location":"plugin-development/cheat-engine-setup/","title":"Setting Up Cheat Engine","text":""},{"location":"plugin-development/creating-a-pentane-plugin-cpp/","title":"Creating A Plugin (C++)","text":""},{"location":"plugin-development/creating-a-pentane-plugin-cpp/#creating-a-plugin-c","title":"Creating A Plugin (C++)","text":""},{"location":"plugin-development/creating-a-pentane-plugin-cpp/#prerequisiste-software","title":"Prerequisiste Software:","text":"<ul> <li>Visual Studio Community Edition</li> <li>git</li> <li>vcpkg</li> </ul>"},{"location":"plugin-development/creating-a-pentane-plugin-rust/","title":"Creating A Plugin (Rust)","text":""},{"location":"plugin-development/creating-a-pentane-plugin-rust/#creating-a-plugin-rust","title":"Creating A Plugin (Rust)","text":"<p>WARNING!!!! PENTANE'S API IS NOT STABLE SO ALL OF THIS IS SUBJECT TO CHANGE!!!!</p>"},{"location":"plugin-development/creating-a-pentane-plugin-rust/#prerequisiste-software","title":"Prerequisiste Software","text":"<ul> <li>rustup</li> <li>Visual Studio Code</li> <li>git (For Version Control)</li> </ul>"},{"location":"plugin-development/creating-a-pentane-plugin-rust/#installation","title":"Installation","text":"<ol> <li>Install Git (Follow the on-screen installer)</li> <li>Install rustup (Follow the instructions on the page)</li> <li>Install Visual Studio Code (Follow the on-screen installer)</li> <li>After the installation is complete, open a terminal and execute the following command: <code>rustup target add i686-pc-windows-msvc</code> to ensure the correct target is installed.</li> </ol>"},{"location":"plugin-development/creating-a-pentane-plugin-rust/#creatingbuilding-a-plugin","title":"Creating/Building a Plugin","text":"<ol> <li>Open a terminal and run <code>cargo new &lt;project_name&gt;</code>, where <code>project_name</code> is your desired name for the plugin.</li> <li>Run <code>cd &lt;project_name&gt;</code>, then run <code>code</code> to open Visual Studio Code.</li> <li>Click on <code>cargo.toml</code> and add these lines to the bottom before then saving the file (Ctrl-S): <pre><code>[lib]\ncrate-type = [\"dylib\"]\n</code></pre></li> <li>Right-click on the root of the project directory, and create a new folder named <code>.cargo</code> right next to <code>src</code>.</li> <li>Create a new file inside the <code>.cargo</code> folder named <code>config.toml</code>, and paste these lines into the file before then saving it: <pre><code>[build]\ntarget = [\"i686-pc-windows-msvc\"]\n</code></pre></li> <li>Now rename the file <code>src/main.rs</code> to <code>src/lib.rs</code> and open it.</li> <li>Delete all contents and paste this template function in: <pre><code>#[no_mangle]\nextern \"stdcall\" fn Pentane_Main() {\n\n}\n</code></pre></li> <li>Now open a terminal inside Visual Studio Code, and execute the following command <code>cargo build --release</code></li> <li>Navigate to your project folder via Windows Explorer, then follow the path  <code>./target/i686-pc-windows-msvc/release/</code> to locate <code>&lt;project_name&gt;.dll</code>.</li> <li>Copy your newly compiled plugin to <code>Pentane/Plugins</code>.</li> <li>Enable your plugin in <code>Pentane/config.toml</code>.</li> </ol> <p>Congratulations! You have built your first plugin!</p>"},{"location":"plugin-development/function-hooking/","title":"Intro to Function Hooking","text":""},{"location":"plugin-development/function-hooking/#intro-to-function-hooking","title":"Intro to Function Hooking","text":"<p>Function hooking refers to the concept of modifying the behavior/logic function in another executable through inserting bits of code to yield control to some other function; enabling the development of patches both big and small to already compiled code.</p> <p>There are two main types of function hooks we use: Replacement and Inline. Replacement hooks are simpler than inline hooks, allowing us replace a funtion entirely while retaining the ability to call the original function that we replaced. These hooks are often used when we either want to completely replace/reimplement a function, or meddle with the arguments passed to it before yielding control back to the game.</p> <p>This graphic, courtesy of the Super Smash Bros. Ultimate modding scene, should help demonstrate visusally what we mean by this.</p> <p></p> <p>In this example, our code runs first, as the call to the original function (denoted by the invokation of the <code>original!</code> macro) occurs at the end of the hook.</p> <p>Inline hooks work quite a bit differently from replacement hooks. They allow us to just insert our own code right in the middle of an existing function, removing the need to reimplement all the logic ourselves. Inline hooks are typically used to grab or quickly change the contents of a local variable or register at just the right moment. Here's another graphic for clarity:</p> <p></p>"},{"location":"plugin-development/ghidra-setup/","title":"Setting Up Ghidra","text":""},{"location":"plugin-development/walkthroughs/expanding-the-css-dialogue-list/","title":"Expanding the CSS Dialogue List","text":""}]}